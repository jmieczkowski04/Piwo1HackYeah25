==== ./output.txt ====


==== ./piwo1\.prettierrc.json ====
{
  "$schema": "https://json.schemastore.org/prettierrc",
  "semi": false,
  "singleQuote": true,
  "printWidth": 100
}


==== ./piwo1\jsconfig.json ====
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}


==== ./piwo1\package.json ====
{
  "name": "piwo1",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "engines": {
    "node": "^20.19.0 || >=22.12.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "axios": "^1.12.2",
    "pinia": "^3.0.3",
    "vue": "^3.5.22",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^6.0.1",
    "prettier": "3.6.2",
    "sass": "^1.93.2",
    "vite": "^7.1.7",
    "vite-plugin-vue-devtools": "^8.0.2"
  }
}


==== ./piwo1\vite.config.js ====
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue(), vueDevTools()],
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@use "@/assets/variables.scss" as *;`,
      },
    },
  },
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
  server: {
    proxy: {
      '/api': { target: 'http://localhost:8080', changeOrigin: true },
    },
  },
})


==== ./piwo1\.vscode\extensions.json ====
{
  "recommendations": [
    "Vue.volar",
    "esbenp.prettier-vscode"
  ]
}


==== ./piwo1\.vscode\settings.json ====
{
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "tsconfig.json": "tsconfig.*.json, env.d.ts",
    "vite.config.*": "jsconfig*, vitest.config.*, cypress.config.*, playwright.config.*",
    "package.json": "package-lock.json, pnpm*, .yarnrc*, yarn*, .eslint*, eslint*, .oxlint*, oxlint*, .prettier*, prettier*, .editorconfig"
  },
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}


==== ./piwo1\data\endpoints\endpoints.txt ====
User
    GET /user/:user_id
    bez niego zwraca dane aktualnego, z nim docelowego

    GET/POST /user/:user_id/localization
    ustalenie użytkowników

    GET /events/all/users/:user_id
    wyświetli eventy, które widzi user. Wolontariusz widzi swoje,
    koordynator widzi swoich wolontariuszy, organizator widzi swoje,
    admin posiada wszystkie

    Opinions
      POST /user/:user_id/opinion

      GET/PATCH/DEL /user/:user_id/opinion/:opinion_id

    Notifications
      POST /user/:user_id/notification

      GET/PATCH/DEL /user/:user_id/notification/:notification_id

TASK

    GET /group/:group_id/user/free
    użytkownicy nieprzypisani do tasków

    POST /group/:group_id/task

    GET/PATCH/DEL /group/:group_id/task/:task_id

    POST /group/:group_id/task/:task_id/user

    GET/DEL /group/:group_id/task/:task_id/user/:user_id
    pobieranie i usuwanie usera do taska

Certificates/Chat

    GET /event/:event_id/user/:user_id
    pobieranie certyfikatu

    GET/POST /event/:event_id/user/:user_id/chat
    /tutaj endpointy do obsługi czatu koord - org

Event
    POST /event

    GET/PATCH/DEL /event/:event_id

    GET /event/unconfirmed

    POST /event/:event_id/confirm

Group

    POST /event/:event_id/group

    GET/PATCH/DEL /event/:event_id/group/:group_id

    DELETE/POST/GET /event/:event_id/group/:group_id/user/:user_id
    usuwa usera z grupy
    dodaje usera do group


Alerts
    POST /event/:event_id/alert

    GET/PATCH/DEL /event/:event_id/alert/alert_id

Org
    POST /institution
    Tworzy organizacje

    GET/PATCH/DEL /institution/:institution_id

    GET /institution/unconfirmed
    zwraca organizacje czekające na zatwierdzenie

    POST /institution/:institution_id/confirm

    POST/GET/PATCH/DEL /institution/:institution_id/user/:user_id


Specjalne user_id = me, czyli bierzemy user id z tokena login gov


==== ./piwo1\data\types\alert.json ====
{
  "id": "string",
  "user_id": "string",
  "event_id": "string",
  "type": "string",
  "condition": "string"
}


==== ./piwo1\data\types\event.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "status": "string",
  "institution_id": "string",
  "groups": [
    {
      "id": "string"
    }
  ],
  "start_date": "string",
  "end_date": "string"
}


==== ./piwo1\data\types\group.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "admin_id": "string",
  "parent_group_id": "string",
  "institution_id": "string",
  "location": {
    "lat": "number",
    "lng": "number"
  },
  "groups": [
    {
      "id": "string"
    }
  ],
  "tasks": [
    {
      "id": "string"
    }
  ]
}


==== ./piwo1\data\types\institution.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "status": "string",
  "admins": [
    {
      "id": "string"
    }
  ],
  "events": [
    {
      "id": "string"
    }
  ]
}


==== ./piwo1\data\types\notification.json ====
{
  "id": "string",
  "user_id": "string",
  "type": "string",
  "condition": "string"
}


==== ./piwo1\data\types\opinion.json ====
{
  "id": "string",
  "group_id": "string",
  "rating": "number",
  "comment": "string"
}


==== ./piwo1\data\types\task.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "group_id": "string",
  "start_date": "string",
  "end_date": "string",
  "location": {
    "lat": "number",
    "lng": "number"
  },
  "users": [
    {
      "id": "string"
    }
  ]
}


==== ./piwo1\data\types\user.json ====
{
  "id": "string",
  "coordinates": {
    "lat": "number",
    "lng": "number"
  },
  "events": [
    {
      "id": "string"
    }
  ],
  "opinions": [
    {
      "id": "string"
    }
  ]
}


==== ./piwo1\src\App.vue ====
<template>
  <MainView />
</template>

<script setup>
import MainView from '@/views/MainView.vue'
</script>

<style scoped></style>


==== ./piwo1\src\main.js ====
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import './assets/main.scss'
import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')


==== ./piwo1\src\api\axios.js ====
import axios from 'axios'

const baseURL = import.meta.env.VITE_API_URL || '/api'

const api = axios.create({
  baseURL,
  timeout: 15000,
  withCredentials: false, // TODO zmień na true jeśli backend ustawia cookies
})

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers = config.headers || {}
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

api.interceptors.response.use(
  (res) => res.data,
  async (error) => {
    const status = error?.response?.status
    const message =
      error?.response?.data?.message || error?.message || `${status || ''} request error`
    return Promise.reject(new Error(message))
  },
)

export default api


==== ./piwo1\src\api\endpoints.js ====
export const ep = {
  //User
  me: () => '/user/me',
  user: (id) => `/user/${id}`,
  userLocalization: (id) => `/user/${id}/localization`,
  eventsForUser: (id) => `/events/all/users/${id}`,

  // Opinions
  opinion: (userId) => `/user/${userId}/opinion`,
  opinionGet: (userId, opinionId) => `/user/${userId}/opinion/${opinionId}`,

  // Notifications
  notification: (userId) => `/user/${userId}/notification`,
  notificationGet: (userId, id) => `/user/${userId}/notification/${id}`,

  // Tasks
  task: (groupId) => `/group/${groupId}/task`,
  taskGet: (groupId, taskId) => `/group/${groupId}/task/${taskId}`,
  taskUser: (groupId, taskId) => `/group/${groupId}/task/${taskId}/user`,
  taskUserGet: (groupId, taskId, userId) => `/group/${groupId}/task/${taskId}/user/${userId}`,
  groupUsersFree: (groupId) => `/group/${groupId}/user/free`,

  // Certificates / Chat
  certificate: (eventId, userId) => `/event/${eventId}/user/${userId}`,
  chat: (eventId, userId) => `/event/${eventId}/user/${userId}/chat`,

  // Events
  event: () => `/event`,
  eventGet: (eventId) => `/event/${eventId}`,
  eventUnconfirmed: () => `/event/unconfirmed`,
  eventConfirm: (eventId) => `/event/${eventId}/confirm`,

  // Groups
  eventGroup: (eventId) => `/event/${eventId}/group`,
  eventGroupGet: (eventId, groupId) => `/event/${eventId}/group/${groupId}`,
  eventGroupUser: (eventId, groupId) => `/event/${eventId}/group/${groupId}/user`,
  eventGroupUserGet: (eventId, groupId, userId) =>
    `/event/${eventId}/group/${groupId}/user/${userId}`,

  // Alerts
  alert: (eventId) => `/event/${eventId}/alert`,
  alertGet: (eventId, alertId) => `/event/${eventId}/alert/${alertId}`,

  // Institution
  institution: () => `/institution`,
  institutionGet: (id) => `/institution/${id}`,
  institutionUnconfirmed: () => `/institution/unconfirmed`,
  institutionConfirm: (id) => `/institution/${id}/confirm`,
  institutionUser: (institutionId, userId) => `/institution/${institutionId}/user/${userId}`,
}


==== ./piwo1\src\api\event.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

export const createEvent = (body) => api.post(ep.event(), body)
export const getEvent = (id) => api.get(ep.eventOne(id))
export const updateEvent = (id, body) => api.patch(ep.eventOne(id), body)
export const deleteEvent = (id) => api.delete(ep.eventOne(id))
export const confirmEvent = (id) => api.post(ep.eventConfirm(id))
export const listUnconfirmedEvents = () => api.get(ep.eventUnconfirmed())


==== ./piwo1\src\api\user.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

export const getMe = () => api.get(ep.me())
export const getUser = (id) => api.get(ep.user(id))
export const setUserLocalization = (id, body) => api.post(ep.userLocalization(id), body)


==== ./piwo1\src\assets\main.scss ====
@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');

* {
  box-sizing: border-box;
  font-family: 'Inter', sans-serif;
  text-decoration: none;
}

body {
  margin: 0;
  padding: 0;
  transition:
    color 0.5s,
    background-color 0.5s;
  color: $font-color;
  background: $background-color;
}

a:visited {
  color: $font-color;
}


==== ./piwo1\src\assets\variables.scss ====
$font-color: #333;
$background-color: #f9f9f9;
$background-dark: #ece8e8;
$blue-color: #2f83c2;
$red-color: #cc3960;


==== ./piwo1\src\components\browser\AdvertField.vue ====


==== ./piwo1\src\components\browser\MapField.vue ====


==== ./piwo1\src\components\browser\ResultsBar.vue ====


==== ./piwo1\src\components\dashboard\SettingsBar.vue ====
<template>
  <div>
    <ul>
      <li>
        <router-link to="/dashboard/panel">Panel główny</router-link>
      </li>
      <li>
        <router-link to="/dashboard/user">Dane użytkownika</router-link>
      </li>
      <li>
        <router-link to="/dashboard/calendar">Kalendarz</router-link>
      </li>
      <li>
        <router-link to="/dashboard/certificates">Zaświadczenia</router-link>
      </li>
      <li>
        <router-link to="/dashboard/reports">Raporty</router-link>
      </li>
      <!--  -->
      <li>
        <router-link to="/dashboard/contact">Kontakt</router-link>
      </li>
      <!--  -->
      <li>
        <router-link to="/dashboard/advert-publication">Publikacja ogłoszeń</router-link>
      </li>
      <li>
        <router-link to="/dashboard/alert-settings">Ustawienia alertów</router-link>
      </li>
      <li>
        <router-link to="/dashboard/application-management">Zarządzanie zgłoszeniami</router-link>
      </li>
      <li>
        <router-link to="/dashboard/opinions">Opinie</router-link>
      </li>
      <!--  -->
      <li>
        <router-link to="/dashboard/institution-verification">Weryfikacja organizacji</router-link>
      </li>
      <li>
        <router-link to="/dashboard/event-verification">Weryfikacja wydarzeń</router-link>
      </li>
      <!--  -->
      <li>
        <router-link to="/dashboard/notification-settings">Ustawienia powiadomień</router-link>
      </li>
    </ul>
  </div>
</template>


==== ./piwo1\src\components\dashboard\Categories\AllCalendar.vue ====
<template>
  Tutaj pojawi się kalendarz z terminami eventów. Ogólny template jest ten sam ale:<br />
  - wolontariusz widzi eventy, do których jest zapisany. Może się z nich wypisać<br />
  - ogranizator widzi stworzone przez siebie eventy. Może tu przypisywać wolontariuszy do zadań<br />
  - koordynator widzi eventy, do których zgłosił wolontariuszy. Czyli widzi to, co każdy z
  wolontariuszy<br />
  - admin widzi wszystko
</template>


==== ./piwo1\src\components\dashboard\Categories\AllCertificates.vue ====
<template>
    Pokazuje certyfikaty</br>
    - wolontariusz może wygenerować certyfikaty z eventów, w których uczestniczył </br>
    - organizator może wygenerować certyfikaty dla wolontariuszy uczestniczących w jego eventach </br>
    - koordynator może wygenerować cetryfikaty dla wolontariuszy, któych zgłaszał </br>
    - admin może wygenerować certyfikat każdemu wolontariuszowi
</template>


==== ./piwo1\src\components\dashboard\Categories\AllDashboard.vue ====
<template>Tutaj wyświetli się podgląd ważnych rzeczy. Czym są ważne rzeczy - zobaczymy</template>


==== ./piwo1\src\components\dashboard\Categories\AllReports.vue ====
<template>printuje dashboard, potem ogarniemy</template>


==== ./piwo1\src\components\dashboard\Categories\AllUserData.vue ====
<template>W tym miejscu użytkownik będzie edytował swoje dane</template>


==== ./piwo1\src\components\dashboard\Categories\CoordContact.vue ====
<template>
    Tutaj koordynator ma czat z organizatorem</br>
    Wybiera event, o którym chce rozmawiać</br>
    Wtedy otworzy się czat - trzeba go jakoś wysrać
</template>


==== ./piwo1\src\components\dashboard\Categories\OrgAdvertPublication.vue ====
<template>
    Tutaj organizator dodaje i edytuje ogłoszenia.</br>
    Klika dodaj lub wybiera ogłoszenie do edycji.</br>
    Wtedy po prostu uzupełnia pola i zapisuje.</br>
    Do tego, tworzy drzewo podeventów, przypisuje</br>
    im adminów itp
</template>


==== ./piwo1\src\components\dashboard\Categories\OrgAlertSettings.vue ====
<template>
    Tutaj organizator zarządza alertami.</br>
    damy mu kilka rodzajów alertów
</template>


==== ./piwo1\src\components\dashboard\Categories\OrgApplicationManagement.vue ====
<template>
    Tutaj organizator zobaczy wolontariuszy,</br>
    którzy się zgłosili (select eventu). Tutaj może ich usunąć</br>
    lub przypisać im zadanie.</br>
    Może też kliknąć na nim, żeby przeczytać opinie.
</template>


==== ./piwo1\src\components\dashboard\Categories\OrgOpinions.vue ====
<template>
    Tutaj organizator zarządza opiniami dla wolontariuszy</br>
    na wszystkich zakończonych wydarzeniach.
</template>


==== ./piwo1\src\components\dashboard\Categories\SudoEventVerification.vue ====
<template>
    Tutaj admin zatwierdza wydarzenia</br>
</template>


==== ./piwo1\src\components\dashboard\Categories\SudoOrgVerification.vue ====
<template>
    Kiedy ktoś chce założyć organizację, admin ją zatwierdza.</br>
</template>


==== ./piwo1\src\components\dashboard\Categories\VolNotifSettings.vue ====
<template>
    Tutaj wolontariusz decyduje, jakie powiadomienia chce otrzymywać.</br>
</template>


==== ./piwo1\src\components\structure\Footer.vue ====
<template>
  <footer>To jest footer i huj.</footer>
</template>

<script setup></script>

<style scoped lang="scss">
footer {
  text-align: center;
  font-size: 10px;
}
</style>


==== ./piwo1\src\components\structure\Navbar.vue ====
<template>
  <nav>
    <router-link to="/">Ogłoszenia</router-link>
    <router-link to="/login">Logowanie</router-link>
    <router-link to="/dashboard">Panel</router-link>
  </nav>
</template>

<script setup></script>

<style scoped lang="scss">
nav {
  display: flex;
  justify-content: space-around;
  padding: 1rem 0;
}

nav a {
  text-decoration: none;
  padding: 0.5rem 1rem;
}

nav a:hover {
  color: $blue-color;
}
nav a.router-link-exact-active {
  font-weight: bold;
  color: $blue-color;
}
</style>


==== ./piwo1\src\composables\useUser.js ====
import { ref } from 'vue'
import { getMe } from '@/api/user.js'

export function useUser() {
  const me = ref(null)
  const loading = ref(false)
  const error = ref(null)

  async function fetchMe() {
    loading.value = true
    error.value = null
    try {
      me.value = await getMe()
    } catch (e) {
      error.value = e.message || 'Błąd'
    } finally {
      loading.value = false
    }
  }

  return { me, loading, error, fetchMe }
}


==== ./piwo1\src\router\index.js ====
import { createRouter, createWebHistory } from 'vue-router'
import LoginPage from '../views/LoginPage.vue'
import BrowserPage from '../views/BrowserPage.vue'
import DashboardPage from '../views/DashboardPage.vue'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'browser',
      component: BrowserPage,
    },
    {
      path: '/login',
      name: 'login',
      component: LoginPage,
    },
    {
      path: '/dashboard',
      name: 'dashboard',
      component: DashboardPage,
      // meta: { requiresAuth: true },
      redirect: '/dashboard/panel',
      children: [
        {
          path: 'panel',
          name: 'dashboard-panel',
          component: () => import('../components/dashboard/Categories/AllDashboard.vue'),
        },
        {
          path: 'user',
          name: 'dashboard-user',
          component: () => import('../components/dashboard/Categories/AllUserData.vue'),
        },
        {
          path: 'calendar',
          name: 'dashboard-calendar',
          component: () => import('../components/dashboard/Categories/AllCalendar.vue'),
        },
        {
          path: 'certificates',
          name: 'dashboard-certificates',
          component: () => import('../components/dashboard/Categories/AllCertificates.vue'),
        },
        {
          path: 'reports',
          name: 'dashboard-reports',
          component: () => import('../components/dashboard/Categories/AllReports.vue'),
        },
        {
          path: 'contact',
          name: 'dashboard-contact',
          component: () => import('../components/dashboard/Categories/CoordContact.vue'),
        },
        {
          path: 'advert-publication',
          name: 'dashboard-advert-publication',
          component: () => import('../components/dashboard/Categories/OrgAdvertPublication.vue'),
        },
        {
          path: 'alert-settings',
          name: 'dashboard-alert-settings',
          component: () => import('../components/dashboard/Categories/OrgAlertSettings.vue'),
        },
        {
          path: 'application-management',
          name: 'dashboard-application-management',
          component: () =>
            import('../components/dashboard/Categories/OrgApplicationManagement.vue'),
        },
        {
          path: 'opinions',
          name: 'dashboard-opinions',
          component: () => import('../components/dashboard/Categories/OrgOpinions.vue'),
        },
        {
          path: 'institution-verification',
          name: 'dashboard-institution-verification',
          component: () => import('../components/dashboard/Categories/SudoOrgVerification.vue'),
        },
        {
          path: 'event-verification',
          name: 'dashboard-event-verification',
          component: () => import('../components/dashboard/Categories/SudoEventVerification.vue'),
        },
        {
          path: 'notification-settings',
          name: 'dashboard-notification-settings',
          component: () => import('../components/dashboard/Categories/VolNotifSettings.vue'),
        },
      ],
    },
    {
      path: '/:pathMatch(.*)*',
      name: 'not-found',
      component: () => import('@/views/NotFound.vue'),
    },
  ],
})

export default router


==== ./piwo1\src\stores\counter.js ====
import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useCounterStore = defineStore('counter', () => {
  const count = ref(0)
  const doubleCount = computed(() => count.value * 2)
  function increment() {
    count.value++
  }

  return { count, doubleCount, increment }
})


==== ./piwo1\src\views\BrowserPage.vue ====
<template>Browser Page</template>

<script setup></script>

<style></style>


==== ./piwo1\src\views\DashboardPage.vue ====
<template>
  <div class="dashboard">
    <div class="settings-bar"><SettingsBar /></div>
    <div class="dashboard-field"><RouterView /></div>
  </div>
</template>

<script setup>
import SettingsBar from '@/components/dashboard/SettingsBar.vue'
</script>

<style scoped lang="scss">
.dashboard {
  display: flex;
}
.settings-bar {
  height: 100%;
  width: 30%;
}
.dashboard-field {
  height: 100%;
  width: 70%;
}
</style>


==== ./piwo1\src\views\LoginPage.vue ====
<template>
  <div>
    <a href="/">Zaloguj się!</a>
  </div>
</template>

<script setup></script>

<style></style>


==== ./piwo1\src\views\MainView.vue ====
<template>
  <div class="container">
    <Navbar />
    <div class="content">
      <router-view />
    </div>
    <Footer />
  </div>
</template>

<script setup>
import Navbar from '@/components/structure/Navbar.vue'
import Footer from '@/components/structure/Footer.vue'
</script>

<style scoped>
.container {
  display: flex;
  flex-direction: column;
  width: 100vw;
}
.content {
  min-height: calc(100vh - 100px);
}
</style>


==== ./piwo1\src\views\NotFound.vue ====
<template>Ni ma takowej strony i huj</template>


