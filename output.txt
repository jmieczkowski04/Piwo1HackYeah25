==== ./output.txt ====


==== ./frontend\.env ====
# VITE_API_URL=http://localhost:8080


==== ./frontend\.prettierrc.json ====
{
  "$schema": "https://json.schemastore.org/prettierrc",
  "semi": false,
  "singleQuote": true,
  "printWidth": 100
}


==== ./frontend\jsconfig.json ====
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}


==== ./frontend\package.json ====
{
  "name": "frontend",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "engines": {
    "node": "^20.19.0 || >=22.12.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "pinia": "^3.0.3",
    "vue": "^3.5.22",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^6.0.1",
    "axios": "^1.12.2",
    "prettier": "3.6.2",
    "sass": "^1.93.2",
    "vite": "^7.1.7",
    "vite-plugin-vue-devtools": "^8.0.2"
  }
}


==== ./frontend\vite.config.js ====
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue(), vueDevTools()],
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@use "@/assets/variables.scss" as *;`,
      },
    },
  },
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
  server: {
    proxy: {
      '/api': { target: 'http://localhost:8080', changeOrigin: true },
    },
  },
})


==== ./frontend\.vscode\extensions.json ====
{
  "recommendations": [
    "Vue.volar",
    "esbenp.prettier-vscode"
  ]
}


==== ./frontend\.vscode\settings.json ====
{
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "tsconfig.json": "tsconfig.*.json, env.d.ts",
    "vite.config.*": "jsconfig*, vitest.config.*, cypress.config.*, playwright.config.*",
    "package.json": "package-lock.json, pnpm*, .yarnrc*, yarn*, .eslint*, eslint*, .oxlint*, oxlint*, .prettier*, prettier*, .editorconfig"
  },
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}


==== ./frontend\data\endpoints\endpoints.txt ====
User
    GET /user/:user_id
    bez niego zwraca dane aktualnego, z nim docelowego

    GET/POST /user/:user_id/localization
    ustalenie użytkowników

    GET /events/all/users/:user_id
    wyświetli eventy, które widzi user. Wolontariusz widzi swoje,
    koordynator widzi swoich wolontariuszy, organizator widzi swoje,
    admin posiada wszystkie

    Opinions
      POST /user/:user_id/opinion

      GET/PATCH/DEL /user/:user_id/opinion/:opinion_id

    Notifications
      POST /user/:user_id/notification

      GET/PATCH/DEL /user/:user_id/notification/:notification_id

TASK

    GET /group/:group_id/user/free
    użytkownicy nieprzypisani do tasków

    POST /group/:group_id/task

    GET/PATCH/DEL /group/:group_id/task/:task_id

    POST /group/:group_id/task/:task_id/user

    GET/DEL /group/:group_id/task/:task_id/user/:user_id
    pobieranie i usuwanie usera do taska

Certificates/Chat

    GET /event/:event_id/user/:user_id
    pobieranie certyfikatu

    GET/POST /event/:event_id/user/:user_id/chat
    /tutaj endpointy do obsługi czatu koord - org

Event
    POST /event

    GET/PATCH/DEL /event/:event_id

    GET /event/unconfirmed

    POST /event/:event_id/confirm

Group

    POST /event/:event_id/group

    GET/PATCH/DEL /event/:event_id/group/:group_id

    DELETE/POST/GET /event/:event_id/group/:group_id/user/:user_id
    usuwa usera z grupy
    dodaje usera do group


Alerts
    POST /event/:event_id/alert

    GET/PATCH/DEL /event/:event_id/alert/alert_id

Org
    POST /institution
    Tworzy organizacje

    GET/PATCH/DEL /institution/:institution_id

    GET /institution/unconfirmed
    zwraca organizacje czekające na zatwierdzenie

    POST /institution/:institution_id/confirm

    POST/GET/PATCH/DEL /institution/:institution_id/user/:user_id


Specjalne user_id = me, czyli bierzemy user id z tokena login gov


==== ./frontend\data\types\alert.json ====
{
  "id": "string",
  "user_id": "string",
  "event_id": "string",
  "type": "string",
  "condition": "string"
}


==== ./frontend\data\types\event.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "status": "string",
  "institution_id": "string",
  "groups": [
    {
      "id": "string"
    }
  ],
  "start_date": "string",
  "end_date": "string"
}


==== ./frontend\data\types\group.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "admin_id": "string",
  "parent_group_id": "string",
  "institution_id": "string",
  "location": {
    "lat": "number",
    "lng": "number"
  },
  "groups": [
    {
      "id": "string"
    }
  ],
  "tasks": [
    {
      "id": "string"
    }
  ]
}


==== ./frontend\data\types\institution.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "status": "string",
  "admins": [
    {
      "id": "string"
    }
  ],
  "events": [
    {
      "id": "string"
    }
  ]
}


==== ./frontend\data\types\notification.json ====
{
  "id": "string",
  "user_id": "string",
  "type": "string",
  "condition": "string"
}


==== ./frontend\data\types\opinion.json ====
{
  "id": "string",
  "group_id": "string",
  "rating": "number",
  "comment": "string"
}


==== ./frontend\data\types\task.json ====
{
  "id": "string",
  "name": "string",
  "description": "string",
  "group_id": "string",
  "start_date": "string",
  "end_date": "string",
  "location": {
    "lat": "number",
    "lng": "number"
  },
  "users": [
    {
      "id": "string"
    }
  ]
}


==== ./frontend\data\types\user.json ====
{
  "id": "string",
  "coordinates": {
    "lat": "number",
    "lng": "number"
  },
  "events": [
    {
      "id": "string"
    }
  ],
  "opinions": [
    {
      "id": "string"
    }
  ]
}


==== ./frontend\src\App.vue ====
<template>
  <MainView />
</template>

<script setup>
import MainView from '@/views/MainView.vue'
</script>

<style scoped></style>


==== ./frontend\src\main.js ====
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import './assets/main.scss'
import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')


==== ./frontend\src\api\alert.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /event/:eventId/alert
export const createAlert = (eventId, body) => api.post(ep.alert(eventId), body)

// GET/PATCH/DEL /event/:eventId/alert/:alertId
export const getAlert = (eventId, alertId) => api.get(ep.alertGet(eventId, alertId))
export const updateAlert = (eventId, alertId, body) =>
  api.patch(ep.alertGet(eventId, alertId), body)
export const deleteAlert = (eventId, alertId) => api.delete(ep.alertGet(eventId, alertId))


==== ./frontend\src\api\axios.js ====
import axios from 'axios'

const baseURL = import.meta.env.VITE_API_URL || '/api'

const api = axios.create({
  baseURL,
  timeout: 15000,
  withCredentials: false, // TODO zmień na true jeśli backend ustawia cookies
})

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token')
  if (token) {
    config.headers = config.headers || {}
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

api.interceptors.response.use(
  (res) => res.data,
  async (error) => {
    const status = error?.response?.status
    const message =
      error?.response?.data?.message || error?.message || `${status || ''} request error`
    return Promise.reject(new Error(message))
  },
)

api.interceptors.response.use(
  (res) => res.data,
  (error) => {
    const status = error?.response?.status
    if (status === 401) {
      localStorage.removeItem('token')
    }
    const message =
      error?.response?.data?.message || error?.message || `${status || ''} request error`
    return Promise.reject(new Error(message))
  },
)

export default api


==== ./frontend\src\api\certificate.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// GET /event/:eventId/user/:userId
export const getCertificate = (eventId, userId, params = {}) =>
  api.get(ep.certificate(eventId, userId), { params })


==== ./frontend\src\api\chat.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// GET /event/:eventId/user/:userId/chat
export const getChat = (eventId, userId, params = {}) =>
  api.get(ep.chat(eventId, userId), { params })

// POST /event/:eventId/user/:userId/chat
export const sendChatMessage = (eventId, userId, body) => api.post(ep.chat(eventId, userId), body)


==== ./frontend\src\api\endpoints.js ====
export const ep = {
  //User
  me: () => '/user/me',
  user: (id) => `/user/${id}`,
  userLocalization: (id) => `/user/${id}/localization`,
  eventsForUser: (id) => `/events/all/users/${id}`,

  // Opinions
  opinion: (userId) => `/user/${userId}/opinion`,
  opinionGet: (userId, opinionId) => `/user/${userId}/opinion/${opinionId}`,

  // Notifications
  notification: (userId) => `/user/${userId}/notification`,
  notificationGet: (userId, id) => `/user/${userId}/notification/${id}`,

  // Tasks
  task: (groupId) => `/group/${groupId}/task`,
  taskGet: (groupId, taskId) => `/group/${groupId}/task/${taskId}`,
  taskUser: (groupId, taskId) => `/group/${groupId}/task/${taskId}/user`,
  taskUserGet: (groupId, taskId, userId) => `/group/${groupId}/task/${taskId}/user/${userId}`,
  groupUsersFree: (groupId) => `/group/${groupId}/user/free`,

  // Certificates / Chat
  certificate: (eventId, userId) => `/event/${eventId}/user/${userId}`,
  chat: (eventId, userId) => `/event/${eventId}/user/${userId}/chat`,

  // Events
  event: () => `/event`,
  eventGet: (eventId) => `/event/${eventId}`,
  eventUnconfirmed: () => `/event/unconfirmed`,
  eventConfirm: (eventId) => `/event/${eventId}/confirm`,

  // Groups
  eventGroup: (eventId) => `/event/${eventId}/group`,
  eventGroupGet: (eventId, groupId) => `/event/${eventId}/group/${groupId}`,
  eventGroupUser: (eventId, groupId) => `/event/${eventId}/group/${groupId}/user`,
  eventGroupUserGet: (eventId, groupId, userId) =>
    `/event/${eventId}/group/${groupId}/user/${userId}`,

  // Alerts
  alert: (eventId) => `/event/${eventId}/alert`,
  alertGet: (eventId, alertId) => `/event/${eventId}/alert/${alertId}`,

  // Institution
  institution: () => `/institution`,
  institutionGet: (id) => `/institution/${id}`,
  institutionUnconfirmed: () => `/institution/unconfirmed`,
  institutionConfirm: (id) => `/institution/${id}/confirm`,
  institutionUser: (institutionId, userId) => `/institution/${institutionId}/user/${userId}`,
}


==== ./frontend\src\api\event.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /event
export const createEvent = (body) => api.post(ep.event(), body)

// GET/PATCH/DEL /event/:eventId
export const getEvent = (eventId) => api.get(ep.eventGet(eventId))
export const updateEvent = (eventId, body) => api.patch(ep.eventGet(eventId), body)
export const deleteEvent = (eventId) => api.delete(ep.eventGet(eventId))

// GET /event/unconfirmed
export const listUnconfirmedEvents = (params = {}) => api.get(ep.eventUnconfirmed(), { params })

// POST /event/:eventId/confirm
export const confirmEvent = (eventId) => api.post(ep.eventConfirm(eventId))


==== ./frontend\src\api\group.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /event/:eventId/group
export const createGroupForEvent = (eventId, body) => api.post(ep.eventGroup(eventId), body)

// GET/PATCH/DEL /event/:eventId/group/:groupId
export const getEventGroup = (eventId, groupId) => api.get(ep.eventGroupGet(eventId, groupId))
export const updateEventGroup = (eventId, groupId, body) =>
  api.patch(ep.eventGroupGet(eventId, groupId), body)
export const deleteEventGroup = (eventId, groupId) => api.delete(ep.eventGroupGet(eventId, groupId))

// POST /event/:eventId/group/:groupId/user  (body: { user_id })
// GET/DEL /event/:eventId/group/:groupId/user/:userId
export const addUserToEventGroup = (eventId, groupId, userId) =>
  api.post(ep.eventGroupUser(eventId, groupId), { user_id: userId })

export const getUserInEventGroup = (eventId, groupId, userId) =>
  api.get(ep.eventGroupUserGet(eventId, groupId, userId))

export const removeUserFromEventGroup = (eventId, groupId, userId) =>
  api.delete(ep.eventGroupUserGet(eventId, groupId, userId))


==== ./frontend\src\api\institution.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /institution
export const createInstitution = (body) => api.post(ep.institution(), body)

// GET/PATCH/DEL /institution/:id
export const getInstitution = (id) => api.get(ep.institutionGet(id))
export const updateInstitution = (id, body) => api.patch(ep.institutionGet(id), body)
export const deleteInstitution = (id) => api.delete(ep.institutionGet(id))

// GET /institution/unconfirmed
export const listUnconfirmedInstitutions = (params = {}) =>
  api.get(ep.institutionUnconfirmed(), { params })

// POST /institution/:id/confirm
export const confirmInstitution = (id) => api.post(ep.institutionConfirm(id))

// POST/GET/PATCH/DEL /institution/:institutionId/user/:userId
export const addUserToInstitution = (institutionId, userId, body = {}) =>
  api.post(ep.institutionUser(institutionId, userId), body)

export const getInstitutionUser = (institutionId, userId) =>
  api.get(ep.institutionUser(institutionId, userId))

export const updateInstitutionUser = (institutionId, userId, body) =>
  api.patch(ep.institutionUser(institutionId, userId), body)

export const removeUserFromInstitution = (institutionId, userId) =>
  api.delete(ep.institutionUser(institutionId, userId))


==== ./frontend\src\api\notification.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /user/:userId/notification
export const createNotification = (userId, body) => api.post(ep.notification(userId), body)

// GET/PATCH/DEL /user/:userId/notification/:id
export const getNotification = (userId, id) => api.get(ep.notificationGet(userId, id))
export const updateNotification = (userId, id, body) =>
  api.patch(ep.notificationGet(userId, id), body)
export const deleteNotification = (userId, id) => api.delete(ep.notificationGet(userId, id))


==== ./frontend\src\api\opinion.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// POST /user/:userId/opinion
export const createOpinion = (userId, body) => api.post(ep.opinion(userId), body)

// GET/PATCH/DEL /user/:userId/opinion/:opinionId
export const getOpinion = (userId, opinionId) => api.get(ep.opinionGet(userId, opinionId))
export const updateOpinion = (userId, opinionId, body) =>
  api.patch(ep.opinionGet(userId, opinionId), body)
export const deleteOpinion = (userId, opinionId) => api.delete(ep.opinionGet(userId, opinionId))


==== ./frontend\src\api\task.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// GET /group/:groupId/user/free
export const listFreeUsersForGroup = (groupId, params = {}) =>
  api.get(ep.groupUsersFree(groupId), { params })

// POST /group/:groupId/task
export const createTask = (groupId, body) => api.post(ep.task(groupId), body)

// GET/PATCH/DEL /group/:groupId/task/:taskId
export const getTask = (groupId, taskId) => api.get(ep.taskGet(groupId, taskId))
export const updateTask = (groupId, taskId, body) => api.patch(ep.taskGet(groupId, taskId), body)
export const deleteTask = (groupId, taskId) => api.delete(ep.taskGet(groupId, taskId))

// POST /group/:groupId/task/:taskId/user   (body: { user_id })
export const addUserToTask = (groupId, taskId, userId) =>
  api.post(ep.taskUser(groupId, taskId), { user_id: userId })

// GET/DEL /group/:groupId/task/:taskId/user/:userId
export const getUserOnTask = (groupId, taskId, userId) =>
  api.get(ep.taskUserGet(groupId, taskId, userId))
export const removeUserFromTask = (groupId, taskId, userId) =>
  api.delete(ep.taskUserGet(groupId, taskId, userId))


==== ./frontend\src\api\user.js ====
import api from './axios.js'
import { ep } from './endpoints.js'

// /user/me
export const getMe = () => api.get(ep.me())

// /user/:id
export const getUser = (id) => api.get(ep.user(id))

// GET/POST /user/:id/localization
export const getUserLocalization = (id) => api.get(ep.userLocalization(id))
export const setUserLocalization = (id, body) => api.post(ep.userLocalization(id), body)

// GET /events/all/users/:id
export const listEventsForUser = (userId, params = {}) =>
  api.get(ep.eventsForUser(userId), { params })


==== ./frontend\src\assets\main.scss ====
@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');

* {
  box-sizing: border-box;
  font-family: 'Inter', sans-serif;
  text-decoration: none;
}

body {
  margin: 0;
  padding: 0;
  transition:
    color 0.2s,
    background-color 0.2s;
  color: $font-color;
  background: $background-color;
}

a:visited {
  color: $font-color;
}

a {
  color: inherit;
  text-decoration: none;
}
a:hover {
  color: $blue-color;
}
.card {
  background: $surface;
  border: 1px solid $border-color;
  border-radius: $radius-lg;
  box-shadow: $shadow-sm;
}


==== ./frontend\src\assets\variables.scss ====
// BRAND (zostają tylko te dwa)
$blue-color: #2f83c2;
$red-color: #cc3960;

// NEUTRALE (możemy dodawać)
$font-color: #333;
$muted-color: #666;
$background-color: #f9f9f9;
$surface: #ffffff;
$surface-hover: #f3f4f6; // delikatne podświetlenie
$border-color: #e5e7eb; // subtelny szary border
$background-dark: #ece8e8; // zostawiam, jeśli używałeś

// Promienie / cienie (neutralne)
$radius-sm: 6px;
$radius-md: 8px;
$radius-lg: 12px;

$shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);


==== ./frontend\src\components\browser\AdvertField.vue ====


==== ./frontend\src\components\browser\MapField.vue ====


==== ./frontend\src\components\browser\ResultsBar.vue ====


==== ./frontend\src\components\dashboard\SettingsBar.vue ====
<template>
  <nav class="settings">
    <RouterLink class="item" to="/dashboard/panel">Panel główny</RouterLink>

    <RouterLink v-if="auth.isCoordinator" class="item" to="/dashboard/user">
      Dane użytkownika
    </RouterLink>

    <RouterLink class="item" to="/dashboard/calendar">Kalendarz</RouterLink>
    <RouterLink class="item" to="/dashboard/certificates">Zaświadczenia</RouterLink>
    <RouterLink class="item" to="/dashboard/reports">Raporty</RouterLink>

    <div class="divider" role="separator"></div>

    <RouterLink class="item" to="/dashboard/contact">Kontakt</RouterLink>

    <RouterLink
      v-if="auth.isOrgAdmin || auth.isGovAdmin"
      class="item"
      to="/dashboard/advert-publication"
    >
      Publikacja ogłoszeń
    </RouterLink>

    <RouterLink v-if="auth.isOrgAdmin" class="item" to="/dashboard/alert-settings">
      Ustawienia alertów
    </RouterLink>

    <RouterLink
      v-if="auth.isOrgAdmin || auth.isGovAdmin"
      class="item"
      to="/dashboard/application-management"
    >
      Zarządzanie zgłoszeniami
    </RouterLink>

    <RouterLink v-if="auth.isOrgAdmin || auth.isGovAdmin" class="item" to="/dashboard/opinions">
      Opinie
    </RouterLink>

    <RouterLink v-if="auth.isGovAdmin" class="item" to="/dashboard/institution-verification">
      Weryfikacja organizacji
    </RouterLink>

    <RouterLink v-if="auth.isGovAdmin" class="item" to="/dashboard/event-verification">
      Weryfikacja wydarzeń
    </RouterLink>

    <RouterLink v-if="auth.isVolunteer" class="item" to="/dashboard/notification-settings">
      Ustawienia powiadomień
    </RouterLink>
  </nav>
</template>

<script setup>
import { useAuthStore } from '@/stores/auth.js'
const auth = useAuthStore()
</script>

<style scoped lang="scss">
.settings {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;

  background: $surface;
  border: 1px solid $border-color;
  border-radius: $radius-md;
  padding: 0.5rem;
}

/* pojedynczy link */
.item {
  display: block;
  padding: 0.6rem 0.75rem;
  border-radius: $radius-sm;
  color: $muted-color;
  transition:
    background-color 120ms ease,
    color 120ms ease,
    border-left-color 120ms ease;

  border-left: 3px solid transparent;

  &:hover {
    background: $surface-hover;
    color: $font-color;
  }

  /* aktywny stan — działa też dla zagnieżdżonych tras */
  &.router-link-active,
  &.router-link-exact-active {
    background: rgba($blue-color, 0.08);
    color: $blue-color;
    font-weight: 600;
    border-left-color: $blue-color;
  }
}

/* separator sekcji */
.divider {
  height: 1px;
  background: $border-color;
  margin: 0.35rem 0;
}
</style>


==== ./frontend\src\components\dashboard\Categories\AllCalendar.vue ====
<template>
  Tutaj pojawi się kalendarz z terminami eventów. Ogólny template jest ten sam ale:<br />
  - wolontariusz widzi eventy, do których jest zapisany. Może się z nich wypisać<br />
  - ogranizator widzi stworzone przez siebie eventy. Może tu przypisywać wolontariuszy do zadań<br />
  - koordynator widzi eventy, do których zgłosił wolontariuszy. Czyli widzi to, co każdy z
  wolontariuszy<br />
  - admin widzi wszystko
</template>


==== ./frontend\src\components\dashboard\Categories\AllCertificates.vue ====
<template>
    Pokazuje certyfikaty</br>
    - wolontariusz może wygenerować certyfikaty z eventów, w których uczestniczył </br>
    - organizator może wygenerować certyfikaty dla wolontariuszy uczestniczących w jego eventach </br>
    - koordynator może wygenerować cetryfikaty dla wolontariuszy, któych zgłaszał </br>
    - admin może wygenerować certyfikat każdemu wolontariuszowi
</template>


==== ./frontend\src\components\dashboard\Categories\AllDashboard.vue ====
<template>Tutaj wyświetli się podgląd ważnych rzeczy. Czym są ważne rzeczy - zobaczymy</template>


==== ./frontend\src\components\dashboard\Categories\AllReports.vue ====
<template>printuje dashboard, potem ogarniemy</template>


==== ./frontend\src\components\dashboard\Categories\AllUserData.vue ====
<template>W tym miejscu użytkownik będzie edytował swoje dane</template>


==== ./frontend\src\components\dashboard\Categories\CoordContact.vue ====
<template>
    Tutaj koordynator ma czat z organizatorem</br>
    Wybiera event, o którym chce rozmawiać</br>
    Wtedy otworzy się czat - trzeba go jakoś wysrać
</template>


==== ./frontend\src\components\dashboard\Categories\OrgAdvertPublication.vue ====
<template>
    Tutaj organizator dodaje i edytuje ogłoszenia.</br>
    Klika dodaj lub wybiera ogłoszenie do edycji.</br>
    Wtedy po prostu uzupełnia pola i zapisuje.</br>
    Do tego, tworzy drzewo podeventów, przypisuje</br>
    im adminów itp
</template>


==== ./frontend\src\components\dashboard\Categories\OrgAlertSettings.vue ====
<template>
    Tutaj organizator zarządza alertami.</br>
    damy mu kilka rodzajów alertów
</template>


==== ./frontend\src\components\dashboard\Categories\OrgApplicationManagement.vue ====
<template>
    Tutaj organizator zobaczy wolontariuszy,</br>
    którzy się zgłosili (select eventu). Tutaj może ich usunąć</br>
    lub przypisać im zadanie.</br>
    Może też kliknąć na nim, żeby przeczytać opinie.
</template>


==== ./frontend\src\components\dashboard\Categories\OrgOpinions.vue ====
<template>
    Tutaj organizator zarządza opiniami dla wolontariuszy</br>
    na wszystkich zakończonych wydarzeniach.
</template>


==== ./frontend\src\components\dashboard\Categories\SudoEventVerification.vue ====
<template>
    Tutaj admin zatwierdza wydarzenia</br>
</template>


==== ./frontend\src\components\dashboard\Categories\SudoOrgVerification.vue ====
<template>
    Kiedy ktoś chce założyć organizację, admin ją zatwierdza.</br>
</template>


==== ./frontend\src\components\dashboard\Categories\VolNotifSettings.vue ====
<template>
    Tutaj wolontariusz decyduje, jakie powiadomienia chce otrzymywać.</br>
</template>


==== ./frontend\src\components\structure\Footer.vue ====
<template>
  <footer class="footer">
    <div class="footer__inner">
      <!-- Brand -->
      <router-link to="/" class="brand" aria-label="Przejdź do strony głównej">
        <img class="brand__logo" src="@/assets/logo.png" alt="" />
        <span class="brand__name">Wolontariat</span>
      </router-link>

      <!-- Nawigacja skrótowa -->
      <nav class="links" aria-label="Szybkie linki">
        <router-link to="/">Ogłoszenia</router-link>
        <router-link to="/dashboard">Panel</router-link>
        <router-link to="/login">Logowanie</router-link>
      </nav>

      <!-- Kontakt / info -->
      <div class="meta">
        <p class="meta__line">
          Masz pytania? <a href="mailto:kontakt@wolontariat.pl">kontakt@wolontariat.pl</a>
        </p>
        <p class="meta__line">© {{ year }} Wolontariat — wszystkie prawa zastrzeżone</p>
      </div>
    </div>
  </footer>
</template>

<script setup>
const year = new Date().getFullYear()
</script>

<style scoped lang="scss">
.footer {
  margin-top: 2rem;
  background: $surface;
  border-top: 1px solid $border-color;
  color: $font-color;
}

.footer__inner {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1.25rem 1rem;

  display: grid;
  grid-template-columns: 1fr auto 1fr;
  align-items: center;
  gap: 1rem;

  @media (max-width: 900px) {
    grid-template-columns: 1fr;
    text-align: center;
  }
}

.brand {
  display: inline-flex;
  align-items: center;
  gap: 0.6rem;
  color: inherit;

  &__logo {
    height: 36px;
    width: auto;
    display: block;
  }
  &__name {
    font-weight: 700;
    letter-spacing: 0.2px;
  }
}

.links {
  display: inline-flex;
  gap: 0.75rem;

  a {
    padding: 0.3rem 0.55rem;
    border-radius: $radius-sm;
    transition:
      background-color 120ms ease,
      color 120ms ease;
    color: $muted-color;

    &:hover {
      color: $blue-color;
      background: $surface-hover;
    }
    &.router-link-exact-active {
      color: $blue-color;
      font-weight: 600;
    }
  }

  @media (max-width: 900px) {
    justify-content: center;
  }
}

.meta {
  text-align: right;

  .meta__line {
    margin: 0.1rem 0;
    color: $muted-color;
    font-size: 0.9rem;

    a {
      color: inherit;
      text-decoration: underline;
      text-underline-offset: 2px;

      &:hover {
        color: $red-color;
      }
    }
  }

  @media (max-width: 900px) {
    text-align: center;
  }
}
</style>


==== ./frontend\src\components\structure\Navbar.vue ====
<template>
  <header class="navbar">
    <div class="navbar__inner">
      <router-link to="/" class="brand">
        <img class="brand__logo" src="@/assets/logo.png" alt="Logo" />
        <span class="brand__name">Wolontariat</span>
      </router-link>

      <nav class="nav">
        <router-link to="/">Ogłoszenia</router-link>
        <router-link to="/login">Logowanie</router-link>
        <router-link to="/dashboard">Panel</router-link>
      </nav>

      <div class="role" v-if="auth.rolesAvailable.length">
        <label v-if="auth.rolesAvailable.length > 1" class="role__switch">
          Rola:
          <select :value="auth.currentRole" @change="onChange" class="select">
            <option v-for="r in auth.rolesAvailable" :key="r" :value="r">
              {{ auth.ROLE_LABEL[r] || r }}
            </option>
          </select>
        </label>
        <span v-else class="badge">
          {{ auth.ROLE_LABEL[auth.currentRole] || auth.currentRole }}
        </span>
      </div>
    </div>
  </header>
</template>

<script setup>
import { useAuthStore } from '@/stores/auth.js'
const auth = useAuthStore()
function onChange(e) {
  auth.setRole(e.target.value)
}
</script>

<style scoped lang="scss">
.navbar {
  position: relative;
  top: 0;
  z-index: 50;
  background: $surface;
  border-bottom: 1px solid $border-color;
}

.navbar__inner {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0.75rem 1rem;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  gap: 1rem;
}

.brand {
  display: inline-flex;
  align-items: center;
  gap: 0.6rem;
  color: $font-color;

  &__logo {
    height: 36px;
    width: auto;
    display: block;
  }
  &__name {
    font-weight: 700;
    letter-spacing: 0.2px;
  }
}

.nav {
  display: inline-flex;
  gap: 0.25rem;

  a {
    padding: 0.45rem 0.7rem;
    border-radius: 8px;
    transition:
      background-color 120ms ease,
      color 120ms ease;
    color: $font-color;

    &:hover {
      background: $surface-hover;
    }
    &.router-link-exact-active {
      color: $blue-color;
      background: $surface-hover;
      font-weight: 600;
    }
  }
}

.role {
  display: inline-flex;
  align-items: center;
}
.role__switch {
  display: inline-flex;
  gap: 0.5rem;
  align-items: center;
}
.select {
  padding: 0.35rem 0.6rem;
  border: 1px solid $border-color;
  border-radius: 8px;
  background: $surface;
}
.badge {
  display: inline-flex;
  align-items: center;
  padding: 0.2rem 0.5rem;
  border-radius: 6px;
  background: $surface-hover;
  border: 1px solid $border-color;
  font-weight: 600;
  font-size: 0.9rem;
}
</style>


==== ./frontend\src\router\index.js ====
import { createRouter, createWebHistory } from 'vue-router'
import LoginPage from '../views/LoginPage.vue'
import BrowserPage from '../views/BrowserPage.vue'
import DashboardPage from '../views/DashboardPage.vue'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'browser',
      component: BrowserPage,
    },
    {
      path: '/login',
      name: 'login',
      component: LoginPage,
    },
    {
      path: '/dashboard',
      name: 'dashboard',
      component: DashboardPage,
      // meta: { requiresAuth: true },
      redirect: '/dashboard/panel',
      children: [
        {
          path: 'panel',
          name: 'dashboard-panel',
          component: () => import('../components/dashboard/Categories/AllDashboard.vue'),
        },
        {
          path: 'user',
          name: 'dashboard-user',
          component: () => import('../components/dashboard/Categories/AllUserData.vue'),
        },
        {
          path: 'calendar',
          name: 'dashboard-calendar',
          component: () => import('../components/dashboard/Categories/AllCalendar.vue'),
        },
        {
          path: 'certificates',
          name: 'dashboard-certificates',
          component: () => import('../components/dashboard/Categories/AllCertificates.vue'),
        },
        {
          path: 'reports',
          name: 'dashboard-reports',
          component: () => import('../components/dashboard/Categories/AllReports.vue'),
        },
        {
          path: 'contact',
          name: 'dashboard-contact',
          component: () => import('../components/dashboard/Categories/CoordContact.vue'),
        },
        {
          path: 'advert-publication',
          name: 'dashboard-advert-publication',
          component: () => import('../components/dashboard/Categories/OrgAdvertPublication.vue'),
        },
        {
          path: 'alert-settings',
          name: 'dashboard-alert-settings',
          component: () => import('../components/dashboard/Categories/OrgAlertSettings.vue'),
        },
        {
          path: 'application-management',
          name: 'dashboard-application-management',
          component: () =>
            import('../components/dashboard/Categories/OrgApplicationManagement.vue'),
        },
        {
          path: 'opinions',
          name: 'dashboard-opinions',
          component: () => import('../components/dashboard/Categories/OrgOpinions.vue'),
        },
        {
          path: 'institution-verification',
          name: 'dashboard-institution-verification',
          component: () => import('../components/dashboard/Categories/SudoOrgVerification.vue'),
        },
        {
          path: 'event-verification',
          name: 'dashboard-event-verification',
          component: () => import('../components/dashboard/Categories/SudoEventVerification.vue'),
        },
        {
          path: 'notification-settings',
          name: 'dashboard-notification-settings',
          component: () => import('../components/dashboard/Categories/VolNotifSettings.vue'),
        },
      ],
    },
    {
      path: '/:pathMatch(.*)*',
      name: 'not-found',
      component: () => import('@/views/NotFound.vue'),
    },
  ],
})

router.beforeEach((to) => {
  const token = localStorage.getItem('token')
  if (to.meta.requiresAuth && !token) {
    //return { name: 'login' }
    console.log('No token found.')
  }
})

export default router


==== ./frontend\src\stores\auth.js ====
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const ROLE = {
  VOLUNTEER: 'VOLUNTEER',
  COORDINATOR: 'COORDINATOR',
  ORG_ADMIN: 'ORG_ADMIN',
  GOV_ADMIN: 'GOV_ADMIN',
}

export const ROLE_LABEL = {
  [ROLE.VOLUNTEER]: 'Wolontariusz',
  [ROLE.COORDINATOR]: 'Koordynator',
  [ROLE.ORG_ADMIN]: 'Admin organizacji',
  [ROLE.GOV_ADMIN]: 'Admin rządowy',
}

export const useAuthStore = defineStore('auth', () => {
  const user = ref(null)
  const rolesAvailable = ref([])
  const currentRole = ref(null)

  function setAuthFromBackend({ user: u, roles }) {
    user.value = u || null
    const r = Array.isArray(roles) ? roles : roles ? [roles] : []
    rolesAvailable.value = r
    currentRole.value = r[0] || null
  }

  function setRole(role) {
    if (rolesAvailable.value.includes(role)) currentRole.value = role
  }

  const isGovAdmin = computed(() => currentRole.value === ROLE.GOV_ADMIN)
  const isOrgAdmin = computed(() => currentRole.value === ROLE.ORG_ADMIN)
  const isCoordinator = computed(() => currentRole.value === ROLE.COORDINATOR)
  const isVolunteer = computed(() => currentRole.value === ROLE.VOLUNTEER)

  return {
    // state
    user,
    rolesAvailable,
    currentRole,
    // labels/enums
    ROLE,
    ROLE_LABEL,
    // actions
    setAuthFromBackend,
    setRole,
    // getters
    isGovAdmin,
    isOrgAdmin,
    isCoordinator,
    isVolunteer,
  }
})


==== ./frontend\src\views\BrowserPage.vue ====
<template>Browser Page</template>

<script setup></script>

<style></style>


==== ./frontend\src\views\DashboardPage.vue ====
<template>
  <div class="dashboard">
    <div class="settings-bar"><SettingsBar /></div>
    <div class="dashboard-field"><RouterView /></div>
  </div>
</template>

<script setup>
import SettingsBar from '@/components/dashboard/SettingsBar.vue'
</script>

<style scoped lang="scss">
.dashboard {
  display: grid;
  grid-template-columns: 280px 1fr;
  gap: 1rem;
  padding: 1rem;

  .settings-bar,
  .dashboard-field {
    background: $surface;
    border: 1px solid $border-color;
    border-radius: $radius-lg;
    padding: 1rem;
  }
}
</style>


==== ./frontend\src\views\LoginPage.vue ====
<template>
  <div class="login">
    <h2>Testowy login</h2>
    <p>Po kliknięciu poniżej dostaniesz wszystkie 4 role do wyboru w nawigacji.</p>

    <button class="btn" @click="loginTest" :disabled="loading">
      {{ loading ? 'Logowanie…' : 'Zaloguj testowo' }}
    </button>

    <div v-if="preview.length" class="preview">
      <strong>Załadowane role:</strong>
      <ul>
        <li v-for="r in preview" :key="r">{{ auth.ROLE_LABEL[r] || r }}</li>
      </ul>
      <small>Teraz możesz przełączyć rolę w prawym górnym rogu (Navbar).</small>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore, ROLE } from '@/stores/auth.js'

const router = useRouter()
const auth = useAuthStore()
const loading = ref(false)
const preview = ref([])

async function loginTest() {
  loading.value = true
  try {
    const fakeResponse = {
      user: { id: 'u-1', name: 'Test User' },
      roles: [ROLE.VOLUNTEER, ROLE.COORDINATOR, ROLE.ORG_ADMIN, ROLE.GOV_ADMIN],
    }

    auth.setAuthFromBackend(fakeResponse)
    preview.value = fakeResponse.roles
    localStorage.setItem('token', 'fake-token')

    router.push({ name: 'dashboard' })
  } finally {
    loading.value = false
  }
}
</script>

<style scoped lang="scss">
.login {
  max-width: 520px;
  margin: 3rem auto;
  padding: 2rem;
  background: $background-dark;
  border-radius: 12px;
}
.btn {
  padding: 0.6rem 1rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
}
.preview {
  margin-top: 1rem;
}
</style>


==== ./frontend\src\views\MainView.vue ====
<template>
  <div class="container">
    <Navbar />
    <div class="content">
      <router-view />
    </div>
    <Footer />
  </div>
</template>

<script setup>
import Navbar from '@/components/structure/Navbar.vue'
import Footer from '@/components/structure/Footer.vue'
</script>

<style scoped>
.container {
  display: flex;
  flex-direction: column;
  width: 100vw;
}
.content {
  min-height: calc(100vh - 100px);
}
</style>


==== ./frontend\src\views\NotFound.vue ====
<template>Ni ma takowej strony i huj</template>


