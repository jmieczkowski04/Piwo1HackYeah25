==== ./manage.py ====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


==== ./requirements.txt ====
appdirs==1.4.4
asgiref==3.9.2
attrs==25.3.0
beautifulsoup4==4.7.1
cached-property==2.0.1
certifi==2025.8.3
charset-normalizer==3.4.3
defusedxml==0.7.1
Django==5.2.7
djangorestframework==3.16.1
djangorestframework_simplejwt==5.5.1
idna==3.10
isodate==0.7.2
lxml==6.0.2
PyJWT==2.10.1
pytz==2025.2
RegonAPI==1.3.1
requests==2.32.5
requests-toolbelt==1.0.0
six==1.17.0
soupsieve==2.8
sqlparse==0.5.3
urllib3==2.5.0
zeep==3.3.1 


==== ./output.txt ====


==== ./skrypt.py ====
import os

def save_files_content_to_txt(root_folder, output_file, ignore_dirs=None):
    """Rekurencyjnie odczytuje pliki .py w folderach, z pominięciem katalogów z ignore_dirs,
    i zapisuje ich treść do pliku tekstowego."""
    ignore_dirs = set(ignore_dirs or [])

    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(root_folder):
            dirs[:] = [d for d in dirs if d not in ignore_dirs]

            for file in files:
                if file.endswith('.py') or file.endswith('.txt') or file.endswith('.json') or file.endswith('.js') or file.endswith('.scss') or file.endswith('.env'):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            outfile.write(f"==== {file_path} ====\n")
                            outfile.write(infile.read())
                            outfile.write("\n\n")
                    except Exception as e:
                        print(f"Nie udało się odczytać pliku {file_path}: {e}")

if __name__ == "__main__":
    input_folder = "./"
    output_file = "output.txt"
    ignore_list = ['venv', '__pycache__', 'build', 'dist', '.git', 'node_modules']

    save_files_content_to_txt(input_folder, output_file, ignore_dirs=ignore_list)
    print(f"Zawartość plików została zapisana do {output_file}, z pominięciem katalogów: {ignore_list}")

==== ./main_backend/wsgi.py ====
"""
WSGI config for main_backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_backend.settings')

application = get_wsgi_application()


==== ./main_backend/asgi.py ====
"""
ASGI config for main_backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_backend.settings')

application = get_asgi_application()


==== ./main_backend/__init__.py ====


==== ./main_backend/urls.py ====
"""
URL configuration for main_backend project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from rest_framework_simplejwt.views import (
    TokenObtainPairView, TokenRefreshView, TokenVerifyView
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('volcon/', include('api.urls')),
    path('volcon/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('volcon/token/verify/', TokenVerifyView.as_view(), name='token_verify')
]



==== ./main_backend/settings.py ====
"""
Django settings for main_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-71&(yk%74-ho&x^8-=z3vwpyw7se*+19=9fyp%^_ut8az%sn)3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
]

# settings.py
INSTALLED_APPS += ['rest_framework',]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


==== ./main_backend/external_api/krs_api_handler.py ====
import requests

# gets the krs info in JSON format
def getKRSinfo(krsNumber):
    response = requests.get(f"https://api-krs.ms.gov.pl/api/krs/OdpisAktualny/{krsNumber}?rejestr=P&format=json")
    return response.json()

==== ./main_backend/external_api/handle_external_api.py ====
import external_api.regon_api_handler as rah
import external_api.krs_api_handler as kah

def getKRSInfo(KRS_number = None, REGON_number = None):
    if(KRS_number is None and REGON_number is None):
        return None
    
    if(KRS_number is None):
        regon_api = rah.initializeRegonApi()
        KRS_number = rah.getKRSFromREGON(regon_api, REGON_number)
    
    KRS_info = kah.getKRSinfo(KRS_number)
    return KRS_info

def getMainInfoFromREGON(REGON_number):
    REGON_info = rah.getInfoFromREGON(REGON_number)
    main_info = {
        "name":     REGON_info["praw_nazwa"],
        "nip":      REGON_info["praw_nip"],
        "country":  REGON_info["praw_adSiedzKraj_Nazwa"],
        "voivodeship": REGON_info["praw_adSiedzWojewodztwo_Nazwa"],
        "city": REGON_info["praw_adSiedzMiejscowosc_Nazwa"],
        "street": REGON_info["praw_adSiedzUlica_Nazwa"],
        "street_number": REGON_info["praw_adSiedzNumerNieruchomosci"],
        "postal_code": REGON_info["praw_adSiedzKodPocztowy"]
    }
    return main_info

==== ./main_backend/external_api/regon_api_handler.py ====
from RegonAPI import RegonAPI
from RegonAPI.exceptions import ApiAuthenticationError

API_KEY = "abcde12345abcde12345"

# initializes Regon API
def initializeRegonApi() -> RegonAPI:
    api = RegonAPI(
    bir_version="bir1.1", is_production=False, timeout=10, operation_timeout=10
    )
    try:
        api.authenticate(key=API_KEY)
    except ApiAuthenticationError as e:
        print("[-]", e)
        exit(0)
    except Exception as e:
        raise

    return api

# gets the KRS number for REGON number using regon API
def getKRSFromREGON(regonApi: RegonAPI, regonNumber):
    requestType = "BIR11OsPrawna"
    regonApi.searchData(regon=regonNumber)
    result = regonApi.dataDownloadFullReport(regonNumber, requestType)
    KRSNumber = result[0] #["praw_numerWRejestrzeEwidencji"]
    return KRSNumber

def getInfoFromREGON(REGON_number):
    REGON_api = initializeRegonApi()
    REGON_info = REGON_api.dataDownloadFullReport(REGON_number, "BIR11OsPrawna")
    return REGON_info[0]

==== ./api/admin.py ====
from django.contrib import admin

from .models import *

@admin.register(UserLocation)
class UserLocationAdmin(admin.ModelAdmin):
    list_display = ('usr_id', 'latitude', 'longitude')  
    search_fields = ('usr_id',)  

@admin.register(Institution)
class InstitutionAdmin(admin.ModelAdmin):
    list_display = ('institution_id', 'is_confirmed', 'regon', 'is_company', 'id_user')  
    search_fields = ('regon', 'id_user')  
    list_filter = ('is_confirmed', 'is_company')

@admin.register(Group)
class GroupAdmin(admin.ModelAdmin):
    list_display = ('group_id', 'name', 'institution_id', 'is_confirmed')  
    search_fields = ('name', 'institution_id')  
    list_filter = ('is_confirmed',)

@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    list_display = ('task_id', 'name', 'institution_id', 'group_id')  
    search_fields = ('name', 'institution_id', 'group_id')

@admin.register(TaskAssignment)
class TaskAssignmentAdmin(admin.ModelAdmin):
    list_display = ('task_id', 'user_id', 'group_id', 'institution_id')  
    search_fields = ('task_id', 'user_id', 'group_id', 'institution_id')

@admin.register(Privilege)
class PrivilegeAdmin(admin.ModelAdmin):
    list_display = ('user_id', 'privilege')  
    search_fields = ('user_id',)

@admin.register(Opinion)
class OpinionAdmin(admin.ModelAdmin):
    list_display = ('user_id', 'institution_id', 'rating')  
    search_fields = ('user_id', 'institution_id', 'rating')

@admin.register(Alert)
class AlertAdmin(admin.ModelAdmin):
    list_display = ('alert_id', 'user_id',)  
    search_fields = ('user_id', 'institution_id', 'message')

@admin.register(ExternalUser)
class ExternalUserAdmin(admin.ModelAdmin):
    list_display = ('external_user_id', 'name')  
    search_fields = ('name', 'email')



==== ./api/specjal_serializers.py ====
# api/specjal_serializers.py
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from django.db.models import Prefetch
from rest_framework import serializers

from .models import Group, Task, TaskAssignment


def _to_iso(value: Optional[str]) -> Optional[str]:
    """
    Zwraca ISO 8601 dla przekazanego stringa/datetimy.
    Zakładamy, że w JSON-ie dates przechowujesz ISO stringi.
    """
    if value is None:
        return None
    # Jeśli to już ISO string, po prostu zwracamy
    try:
        # Spróbuj sparsować — jeśli się uda, zwróć znormalizowane ISO z 'Z'
        dt = datetime.fromisoformat(str(value).replace("Z", "+00:00"))
        return dt.astimezone(timezone.utc).isoformat().replace("+00:00", "Z")
    except Exception:
        # Nie parsujemy na siłę — zwróć jak jest (frontend i tak przyjmie ISO)
        return str(value)


def _status_from_dates(start_iso: Optional[str], end_iso: Optional[str]) -> str:
    """
    FINISHED jeżeli koniec w przeszłości, w przeciwnym razie CONFIRMED.
    """
    if end_iso:
        try:
            end_dt = datetime.fromisoformat(end_iso.replace("Z", "+00:00"))
            now = datetime.now(timezone.utc)
            return "FINISHED" if end_dt < now else "CONFIRMED"
        except Exception:
            pass
    return "CONFIRMED"


class TaskUserSerializer(serializers.Serializer):
    id = serializers.CharField()

    @staticmethod
    def from_assignment(ass: TaskAssignment) -> Dict[str, Any]:
        return {"id": f"u-{ass.user_id}"}


class TaskSerializer(serializers.Serializer):
    id = serializers.CharField()
    name = serializers.CharField()
    start_date = serializers.CharField(allow_null=True)
    end_date = serializers.CharField(allow_null=True)
    users = TaskUserSerializer(many=True)

    @staticmethod
    def from_model(task: Task, assignments: List[TaskAssignment]) -> Dict[str, Any]:
        dates = task.dates or {}
        start_iso = _to_iso(dates.get("start"))
        end_iso = _to_iso(dates.get("end"))
        return {
            "id": f"tsk-{task.task_id}",
            "name": task.name,
            "start_date": start_iso,
            "end_date": end_iso,
            "users": [TaskUserSerializer.from_assignment(a) for a in assignments if a.task_id == task.task_id],
        }


class GroupNodeSerializer(serializers.Serializer):
    id = serializers.CharField()
    name = serializers.CharField()
    tasks = TaskSerializer(many=True)

    @staticmethod
    def from_model(group: Group, tasks: List[Task], task_assignments: List[TaskAssignment]) -> Dict[str, Any]:
        group_tasks = [t for t in tasks if t.group_id == group.group_id]
        return {
            "id": f"grp-{group.group_id}",
            "name": group.name,
            "tasks": [
                TaskSerializer.from_model(t, task_assignments)
                for t in group_tasks
            ],
        }


class EventLikeSerializer(serializers.Serializer):
    """
    Serializer „eventu” na bazie top-level Group (parent_group_id is NULL).
    Zwraca strukturę 1:1 jak w mockEventsForUser().
    """
    id = serializers.CharField()
    name = serializers.CharField()
    description = serializers.CharField(allow_null=True)
    status = serializers.CharField()
    institution_id = serializers.CharField()
    start_date = serializers.CharField(allow_null=True)
    end_date = serializers.CharField(allow_null=True)
    groups = GroupNodeSerializer(many=True)

    @staticmethod
    def from_model(
        event_group: Group,
        child_groups: List[Group],
        tasks: List[Task],
        task_assignments: List[TaskAssignment],
    ) -> Dict[str, Any]:
        dates = event_group.dates or {}
        start_iso = _to_iso(dates.get("start"))
        end_iso = _to_iso(dates.get("end"))
        status = _status_from_dates(start_iso, end_iso)

        children = [g for g in child_groups if g.parent_group_id == event_group.group_id]

        return {
            "id": f"evt-{event_group.group_id}",
            "name": event_group.name,
            "description": event_group.desc or "",
            "status": status,
            "institution_id": f"inst-{event_group.institution_id}" if isinstance(event_group.institution_id, int) else str(event_group.institution_id),
            "start_date": start_iso,
            "end_date": end_iso,
            "groups": [
                GroupNodeSerializer.from_model(child, tasks, task_assignments)
                for child in children
            ],
        }


def fetch_calendar_payload() -> List[Dict[str, Any]]:
    """
    Buduje listę eventów (top-level groups) wraz z podgrupami, taskami i userami.
    Zwraca gotowy payload do frontendu (format jak w mockEventsForUser()).
    """
    # Top-level „eventy”
    top_groups = list(Group.objects.filter(parent_group_id__isnull=True))

    # Podgrupy (dzieci)
    child_groups = list(Group.objects.filter(parent_group_id__isnull=False))

    # Wszystkie taski dla wszystkich grup z góry
    tasks = list(Task.objects.all())

    # Wszystkie assignmenty (dla mapowania users)
    assignments = list(TaskAssignment.objects.all())

    # Składamy
    result = [
        EventLikeSerializer.from_model(g, child_groups, tasks, assignments)
        for g in top_groups
    ]
    return result


==== ./api/models.py ====
from django.db import models

class UserLocation(models.Model):
    usr_id = models.IntegerField()
    latitude = models.FloatField()
    longitude = models.FloatField()

    def __str__(self):
        return f"User {self.usr_id}: ({self.latitude}, {self.longitude})"

class Institution(models.Model):
    institution_id = models.AutoField(primary_key=True)
    is_confirmed = models.BooleanField(default=False)
    regon = models.CharField(max_length=14, blank=True, null=True, unique=True)
    is_company = models.BooleanField(default=False)
    id_user = models.IntegerField(blank=True, null=True)

    def __str__(self):
        if self.is_company and self.regon:
            return f"Firma REGON: {self.regon} (potwierdzona: {self.is_confirmed})"
        elif self.id_user:
            return f"Osoba ID: {self.id_user} (potwierdzona: {self.is_confirmed})"
        return f"Instytucja (potwierdzona: {self.is_confirmed})"

class Group(models.Model):
    institution_id = models.IntegerField()
    group_id = models.AutoField(primary_key=True)
    group_loc = models.JSONField()   
    desc = models.TextField(blank=True, null=True)
    parent_group_id = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=255)
    is_confirmed = models.BooleanField(default=False)
    dates = models.JSONField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} (ID: {self.group_id})"

class Task(models.Model):
    institution_id = models.IntegerField()
    group_id = models.IntegerField()
    task_id = models.AutoField(primary_key=True)
    name = modelharField(max_length=255)
    desc = models.TextField(blank=True, null=True)
    dates = models.JSONField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} (ID: {self.task_id})"

class TaskAssignment(models.Model):
    institution_id = models.IntegerField()
    group_id = models.IntegerField()
    task_id = models.IntegerField()
    user_id = models.IntegerField()

    def __str__(self):
        return f"Task {self.task_id} assigned to User {self.user_id} (Group {self.group_id}, Institution {self.institution_id})"

# poprawic primary keys itp
class Privilege(models.Model):
    user_id = models.IntegerField()
    privilege_id = models.AutoField(primary_key=True)
    institution_id = models.IntegerField()
    group_id = models.IntegerField()
    privilege = models.JSONField()

    def __str__(self):
        return f"Privilege {self.privilege_id} for User {self.user_id} (Institution {self.institution_id}, Group {self.group_id})"

class Opinion(models.Model):
    institution_id = models.IntegerField()
    group_id = models.IntegerField()
    user_id = models.IntegerField()
    author_id = models.IntegerField()
    desc = models.TextField()
    rating = models.IntegerField()

    def __str__(self):
        return f"Opinia o użytkowniku {self.user_id} (autor: {self.author_id}, instytucja: {self.institution_id}, grupa: {self.group_id})"

class Alert(models.Model):
    alert_id = models.AutoField(primary_key=True)
    user_id = models.IntegerField()
    group_id = models.IntegerField()
    type = models.IntegerField()
    condition = models.CharField(max_length=255)

    def __str__(self):
        return f"Alert {self.alert_id} (user: {self.user_id}, group: {self.group_id}, type: {self.type})"

class ExternalUser(models.Model):
    external_user_id = models.AutoField(primary_key=True)
    pesel = models.CharField(max_length=11)
    name = models.CharField(max_length=255)
    surname = models.CharField(max_length=255)
    agreement_file = models.BinaryField(blank=True, null=True)
    supervisor_id = models.IntegerField()
    institution_id = models.IntegerField()
    group_id = models.IntegerField()
    is_accepted = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.name} {self.surname} (PESEL: {self.pesel})"




==== ./api/tests.py ====
from django.test import TestCase

# Create your tests here.


==== ./api/views.py ====
from django.shortcuts import render
from django.http import JsonResponse
import json

def get_userid_from_token(access_token):
    return "2137"

def attach_token_view(request):
    if request.method != 'GET':
        return JsonResponse({'error': 'Invalid request method'}, status=405)
    
    refresh_token = request.GET.get('refresh_token')
    access_token = request.GET.get('access_token')
    if refresh_token is None or access_token is None:
        return JsonResponse({'error': 'Missing tokens'}, status=400)
    
    request.session["access_token"] = access_token
    request.session["refresh_token"] = refresh_token

    print(access_token)
    return JsonResponse({}, status=200)

def check_token(request):
    print(request.session["access_token"])

==== ./api/__init__.py ====


==== ./api/user_requests.py ====
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import json

mock_database_aaa = {
    "data": [
    {
        "id": "2137",
        "coordinates": {
            "lat": "10",
            "lng": "10"
        },
        "events": [
            {
            "id": "2222"
            }
        ],
        "opinions": [
            {
            "id": "3333"
            }
        ]
    },
    {
        "id": "213",
        "coordinates": {
            "lat": "10",
            "lng": "10"
        },
        "events": [
            {
            "id": "2222"
            }
        ],
        "opinions": [
            {
            "id": "3333"
            }
        ]
    }
]
}

def get_user_by_id(id):
    for user in mock_database_aaa["data"]:
        if user["id"] == id:
            return user
    print("here")
    return None

def get_all_users(request):
    if request.method != 'GET':
        return JsonResponse({'error': 'Invalid request method'}, status=405)

    return JsonResponse(mock_database_aaa, status=200)

def get_user_data(request, id):
    if request.method != 'GET':
        return JsonResponse({'error': 'Invalid request method'}, status=405)
    
    user_data = get_user_by_id(str(id))

    if user_data is None:
        return JsonResponse({"error": "user does not exist"}, status=404)
    
    return JsonResponse(user_data, status=200)

@csrf_exempt
def get_set_user_coordinates(request, id):
    if request.method != 'POST' and request.method != 'GET':
        return JsonResponse({'error': 'Invalid request method'}, status=405)
    
    user_data = get_user_by_id(str(id))

    if user_data is None:
        return JsonResponse({"error": "user does not exist"}, status=404)
    
    if request.method == 'POST':
        user_data["coordinates"]["lat"] = request.POST.get('lat')
        user_data["coordinates"]["lng"] = request.POST.get('lng')
        return JsonResponse({}, status=200)
    
    return JsonResponse({"lat": user_data["coordinates"]["lat"], "lng": user_data["coordinates"]["lng"]}, status=200)


==== ./api/apps.py ====
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'


==== ./api/urls.py ====
from django.urls import path
from . import views
from .views import attach_token_view, check_token
from .user_requests import get_user_data, get_all_users, get_set_user_coordinates

urlpatterns = [
    path('attach_token/', attach_token_view, name='attach_token'),
    path('user/', get_all_users, name='user_detail'),
    path('user/<int:id>/', get_user_data, name='user_detail'),
    path('user/<int:id>/localization', get_set_user_coordinates, name='user_detail'),
    path('check/token', check_token, name='check_token')
]


==== ./api/migrations/__init__.py ====


